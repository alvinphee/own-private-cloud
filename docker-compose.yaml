version: "3.7"

services:

  traefik:
    build:
      context: ./
      dockerfile: ./build/Dockerfile-traefik
    image: traefik:custom
    container_name: traefik
    restart: unless-stopped
    volumes:
      - certificates:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - passwords_network
      - notes_network
      - cloud_network
      - calendar_network
      - bookmarks_network
      - sync_network
      - tasks_network
      - maps_network
      - cryptpad_network
      - mail_network
    ports:
      - "443:443"

  mysql:
    build:
      context: ./
      dockerfile: ./build/Dockerfile-mysql
    image: mariadb:custom
    container_name: mysql
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - NOTES_DATABASE=${NOTES_DATABASE}
      - NOTES_DB_USERNAME=${NOTES_DB_USERNAME}
      - NOTES_DB_PASSWORD=${NOTES_DB_PASSWORD}
      - PASSBOLT_DATABASE=${PASSBOLT_DATABASE}
      - PASSBOLT_DB_USERNAME=${PASSBOLT_DB_USERNAME}
      - PASSBOLT_DB_PASSWORD=${PASSBOLT_DB_PASSWORD}
      - DAVIS_DATABASE=${DAVIS_DATABASE}
      - DAVIS_DB_USERNAME=${DAVIS_DB_USERNAME}
      - DAVIS_DB_PASSWORD=${DAVIS_DB_PASSWORD}
    restart: unless-stopped
    volumes:
      - database_mysql_volume:/var/lib/mysql
    networks:
      - passwords_network
      - notes_network
      - calendar_network

  passbolt:
    build:
      context: ./
      dockerfile: ./build/Dockerfile-passbolt
    image: passbolt:custom
    container_name: passbolt
    environment:
      - APP_FULL_BASE_URL=https://${PASSWORDS_DOMAIN}
      - DATASOURCES_DEFAULT_HOST=mysql
      - DATASOURCES_DEFAULT_DATABASE=${PASSBOLT_DATABASE}
      - DATASOURCES_DEFAULT_USERNAME=${PASSBOLT_DB_USERNAME}
      - DATASOURCES_DEFAULT_PASSWORD=${PASSBOLT_DB_PASSWORD}
      - EMAIL_DEFAULT_FROM=${EMAIL}
      - EMAIL_TRANSPORT_DEFAULT_HOST=${MAIL_HOST}
      - EMAIL_TRANSPORT_DEFAULT_PORT=${MAIL_PORT}
      - EMAIL_TRANSPORT_DEFAULT_TLS=true
      - EMAIL_TRANSPORT_DEFAULT_USERNAME=${MAIL_USERNAME}
      - EMAIL_TRANSPORT_DEFAULT_PASSWORD=${MAIL_PASSWORD}
    restart: unless-stopped
    command: ["/usr/bin/wait-for.sh", "mysql:3306", "--", "/docker-entrypoint.sh"]
    tty: true
    depends_on:
      - mysql
    volumes:
      - gpg_volume:/var/www/passbolt/config/gpg
    tmpfs:
      - /run
    networks:
      - passwords_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.passbolt.entrypoints=websecure"
      - "traefik.http.routers.passbolt.rule=Host(`${PASSWORDS_DOMAIN}`)"
      - "traefik.http.routers.passbolt.tls=true"
      - "traefik.http.routers.passbolt.tls.certresolver=default"
      - "traefik.http.routers.passbolt.middlewares=security@file"

  notes:
    build:
      context: ./
      dockerfile: ./build/Dockerfile-standardnotes
    image: standardnotes:custom
    container_name: notes
    environment:
      - RAILS_ENV=production
      - RAILS_SERVE_STATIC_FILES=true
      - SECRET_KEY_BASE=${NOTES_SECRET_KEY_BASE}
      - DB_HOST=mysql
      - DB_DATABASE=${NOTES_DATABASE}
      - DB_USERNAME=${NOTES_DB_USERNAME}
      - DB_PASSWORD=${NOTES_DB_PASSWORD}
      - DISABLE_USER_REGISTRATION=true
    restart: unless-stopped
    depends_on:
      - mysql
    networks:
      - notes_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.standardnotes.entrypoints=websecure"
      - "traefik.http.routers.standardnotes.rule=Host(`${NOTES_DOMAIN}`)"
      - "traefik.http.routers.standardnotes.tls=true"
      - "traefik.http.routers.standardnotes.tls.certresolver=default"
      - "traefik.http.routers.standardnotes.middlewares=security@file"

  # Cozy Database
  couchdb:
    image: couchdb:2.3
    container_name: couchdb
    environment:
      - COUCHDB_USER=${COUCHDB_USER}
      - COUCHDB_PASSWORD=${COUCHDB_PASSWORD}
    restart: unless-stopped
    volumes:
      - database_couch_volume:/opt/couchdb/data
    networks:
      - cloud_network

  # Cozy Stack
  cozy:
    build:
      context: ./
      dockerfile: ./build/Dockerfile-cozy
      args:
        version: "1.4.21"
    image: cozy:custom
    container_name: cozy
    environment:
      - DOMAIN=${CLOUD_DOMAIN}
      - COUCHDB_PROTOCOL=http
      - COUCHDB_HOST=couchdb
      - COUCHDB_PORT=5984
      - COUCHDB_USER=${COUCHDB_USER}
      - COUCHDB_PASSWORD=${COUCHDB_PASSWORD}
      - COZY_ADMIN_PASSPHRASE=${COZY_ADMIN_PASSPHRASE}
      - MAIL_HOST=${MAIL_HOST}
      - MAIL_PORT=${MAIL_PORT}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - MAIL_DISABLE_TLS=false
      - MAIL_SKIP_CERTIFICATE_VALIDATION=false
    restart: unless-stopped
    depends_on:
      - couchdb
    volumes:
      - files_cozy_volume:/var/lib/cozy/data
    networks:
      - cloud_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.cozy.entrypoints=websecure"
      - "traefik.http.routers.cozy.rule=Host(`${CLOUD_DOMAIN}`) || Host(`drive.${CLOUD_DOMAIN}`) || Host(`settings.${CLOUD_DOMAIN}`) || Host(`home.${CLOUD_DOMAIN}`)"
      - "traefik.http.routers.cozy.tls=true"
      - "traefik.http.routers.cozy.tls.certresolver=default"
      - "traefik.http.services.cozy.loadbalancer.server.port=8080"
      - "traefik.http.middlewares.home-redirectregex.redirectregex.regex=^https://home.${CLOUD_DOMAIN}/?$$"
      - "traefik.http.middlewares.home-redirectregex.redirectregex.replacement=https://drive.${CLOUD_DOMAIN}"
      - "traefik.http.middlewares.home-redirectregex.redirectregex.permanent=true"
      - "traefik.http.middlewares.cozy-chain.chain.middlewares=home-redirectregex@docker,security@file"
      - "traefik.http.routers.cozy.middlewares=cozy-chain"

  # Caldav / Carddav server
  davis-proxy:
    build:
      context: ./
      dockerfile: ./build/Dockerfile-davis-proxy
    image: davis-proxy:custom
    container_name: davis-proxy
    restart: unless-stopped
    depends_on:
      - davis
    volumes:
      - davis_www:/var/www/davis
    networks:
      - calendar_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.davis.entrypoints=websecure"
      - "traefik.http.routers.davis.rule=Host(`${CALENDAR_DOMAIN}`)"
      - "traefik.http.routers.davis.tls=true"
      - "traefik.http.routers.davis.tls.certresolver=default"
      - "traefik.http.routers.davis.middlewares=security@file"

  davis:
    build:
      context: ./
      dockerfile: ./build/Dockerfile-davis
      args:
        version: "1.6.0"
    image: davis:custom
    container_name: davis
    environment:
      - APP_ENV=prod
      - APP_SECRET=${DAVIS_APP_SECRET}
      - DATABASE_URL=mysql://${DAVIS_DB_USERNAME}:${DAVIS_DB_PASSWORD}@mysql:3306/${DAVIS_DATABASE}
      - MAILER_URL=smtp://${MAIL_HOST}:${MAIL_PORT}?encryption=tls&username=${MAIL_USERNAME}&password=${MAIL_PASSWORD}
      - ADMIN_LOGIN=${DAVIS_ADMIN_LOGIN}
      - ADMIN_PASSWORD=${DAVIS_ADMIN_PASSWORD}
      - AUTH_REALM=${DAVIS_AUTH_REALM}
      - AUTH_METHOD=Digest
      - IMAP_AUTH_URL=null
      - CALDAV_ENABLED=true
      - CARDDAV_ENABLED=true
      - WEBDAV_ENABLED=false
      - INVITE_FROM_ADDRESS=${EMAIL}
    restart: unless-stopped
    depends_on:
      - mysql
    volumes:
      - davis_www:/var/www/davis
    networks:
      - calendar_network

  # XBS = X-browser sync
  xbs:
    build:
      context: ./
      dockerfile: ./build/Dockerfile-xbs
    image: xbs:custom
    container_name: xbs
    environment:
      - XBS_API_HOSTNAME=${BOOKMARKS_DOMAIN}
      - XBROWSERSYNC_DB_USER=${XBS_DB_USERNAME}
      - XBROWSERSYNC_DB_PWD=${XBS_DB_PASSWORD}
    restart: unless-stopped
    depends_on:
      - mongo
    networks:
      - bookmarks_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.xbs.entrypoints=websecure"
      - "traefik.http.routers.xbs.rule=Host(`${BOOKMARKS_DOMAIN}`)"
      - "traefik.http.routers.xbs.tls=true"
      - "traefik.http.routers.xbs.tls.certresolver=default"
      - "traefik.http.routers.xbs.middlewares=security@file"

  # XBS database
  mongo:
    build:
      context: ./
      dockerfile: ./build/Dockerfile-mongo
    image: mongo:custom
    container_name: mongo
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - XBS_DATABASE=${XBS_DATABASE}
      - XBS_DB_USERNAME=${XBS_DB_USERNAME}
      - XBS_DB_PASSWORD=${XBS_DB_PASSWORD}
    restart: unless-stopped
    volumes:
      - database_mongo_volume:/data/db
    networks:
      - bookmarks_network

  # Syncthing
  syncthing:
    build:
      context: ./
      dockerfile: ./build/Dockerfile-syncthing
    image: syncthing:custom
    container_name: syncthing
    environment:
      - PUID=${SYNC_PUID}
      - PGID=${SYNC_PGID}
      - SYNC_UI_PASSWORD=${SYNC_UI_PASSWORD}
      - SYNC_API_KEY=${SYNC_API_KEY}
    restart: unless-stopped
    volumes:
      - files_sync_volume:/var/syncthing/data
    networks:
      - sync_network
    ports:
      - "22000:22000" # We must expose this port for Syncthing to work
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.syncthing.entrypoints=websecure"
      - "traefik.http.routers.syncthing.rule=Host(`${SYNC_DOMAIN}`)"
      - "traefik.http.routers.syncthing.tls=true"
      - "traefik.http.routers.syncthing.tls.certresolver=default"
      - "traefik.http.routers.syncthing.middlewares=security@file"
      - "traefik.http.services.syncthing.loadbalancer.server.port=8384"

  # Planka (tasks)
  planka:
    image: meltyshev/planka:latest
    container_name: tasks
    command: >
      bash -c
        "for i in `seq 1 30`; do
          ./start.sh &&
          s=$$? && break || s=$$?;
          echo \"Tried $$i times. Waiting 5 seconds...\";
          sleep 5;
        done; (exit $$s)"
    environment:
      - BASE_URL=https://${TASKS_DOMAIN}
      - DATABASE_URL=postgresql://postgres@postgres/${PLANKA_DATABASE_NAME}
      - SECRET_KEY=${PLANKA_SECRET}
    restart: unless-stopped
    depends_on:
      - postgres
    networks:
      - tasks_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.planka.entrypoints=websecure"
      - "traefik.http.routers.planka.rule=Host(`${TASKS_DOMAIN}`)"
      - "traefik.http.routers.planka.tls=true"
      - "traefik.http.routers.planka.tls.certresolver=default"
      - "traefik.http.routers.planka.middlewares=security@file"
    volumes:
      - files_planka_volume:/app/public/attachments

  postgres:
    image: postgres:13.0-alpine
    restart: unless-stopped
    volumes:
      - database_postgres_volume:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${PLANKA_DATABASE_NAME}
      - POSTGRES_HOST_AUTH_METHOD=trust
    networks:
      - tasks_network

  # Mails (bound on a specific IP for the reverse to be unique)
  dovecot:
    build:
      context: ./
      dockerfile: ./build/Dockerfile-dovecot
      args:
        mail_principal_user: ${MAIL_PRINCIPAL_USER}
        mail_principal_password: ${MAIL_PRINCIPAL_PASSWORD}
        mail_group_id: ${MAIL_VOLUME_GROUP}
    image: dovecot:custom
    container_name: mail-dovecot
    env_file: .env
    restart: unless-stopped
    volumes:
      - mails_volume:/var/mail
      - certificates:/etc/letsencrypt
    networks:
      - mail_network
    ports:
      - "${MAIL_HOST_IP}:143:143"
      - "${MAIL_HOST_IP}:993:993"
    labels:
      ofelia.enabled: "true"
      ofelia.job-exec.reload_dovecot_for_certificates.schedule: "@weekly"
      ofelia.job-exec.reload_dovecot_for_certificates.command: "dovecot reload"

  smtpd:
    build:
      context: ./
      dockerfile: ./build/Dockerfile-opensmtpd
      args:
        top_domain: ${TOP_DOMAIN}
        mail_principal_user: ${MAIL_PRINCIPAL_USER}
        mail_principal_password: ${MAIL_PRINCIPAL_PASSWORD}
        mail_group_id: ${MAIL_VOLUME_GROUP}
    image: opensmtpd:custom
    container_name: mail-smtpd
    env_file: .env
    restart: unless-stopped
    volumes:
      - mails_volume:/var/mail
      - certificates:/etc/letsencrypt
    networks:
      - mail_network
    ports:
      - "${MAIL_HOST_IP}:25:25"
      - "${MAIL_HOST_IP}:465:465"
      - "${MAIL_HOST_IP}:587:587"
    labels:
      ofelia.enabled: "true"
      ofelia.job-exec.reload_smtpd_for_certificates.schedule: "@weekly"
      ofelia.job-exec.reload_smtpd_for_certificates.command: 'killall smtpd' # wait 60s max and then the container stops and restarts

  # This container :
  #  - exposes a traefik endpoint so that certificates for MAIL_DOMAIN are created and renewed by Traefik via labels
  # NB: Could be replaced by a webmail client
  mail-certificates-endpoint:
    build:
      context: ./
      dockerfile: ./build/Dockerfile-mailendpoint
      args:
        mail_domain: ${MAIL_DOMAIN}
    image: httpd:custom
    container_name: mail-certificates-endpoint
    networks:
      - mail_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mail.entrypoints=websecure"
      - "traefik.http.routers.mail.rule=Host(`${MAIL_DOMAIN}`)"
      - "traefik.http.routers.mail.tls=true"
      - "traefik.http.routers.mail.tls.certresolver=default"
      - "traefik.http.routers.mail.middlewares=security@file"

  # This container :
  #  - periodically exports the Traefik certificates to .pem files, in a shared volume
  #    so that dovecot and opensmtpd containers can consume them
  mail-certificates-dumper:
    image: ldez/traefik-certs-dumper:v2.7.0
    container_name: mail-certificates-dumper
    entrypoint: sh -c '
      traefik-certs-dumper file --version v2
        --crt-name=fullchain --crt-ext=.pem
        --key-name=privkey --key-ext=.pem
        --domain-subdir
        --source /letsencrypt/acme.json --dest /letsencrypt/live/.
        --watch'
    volumes:
      - certificates:/letsencrypt

  # Cron scheduler - restarts dovecot and smtpd periodically so that new certificates are picked up correctly
  ofelia:
    image: mcuadros/ofelia:latest
    container_name: mail-ofelia
    restart: unless-stopped
    depends_on:
      - smtpd
      - dovecot
    command: daemon --docker
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro

  # kvtiles (Maps)
  maps:
    # See https://hub.docker.com/r/akhenakh/kvtiles/tags for available tags / zooms
    image: akhenakh/kvtiles:planet-10-latest
    container_name: maps
    restart: unless-stopped
    command: ["-tilesKey=${MAPS_API_KEY}"] # entrypoint is ["./kvtilesd"]
    networks:
      - maps_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.maps.entrypoints=websecure"
      - "traefik.http.routers.maps.rule=Host(`${MAPS_DOMAIN}`)"
      - "traefik.http.routers.maps.tls=true"
      - "traefik.http.routers.maps.tls.certresolver=default"
      - "traefik.http.routers.maps.middlewares=security@file"
      - "traefik.http.services.maps.loadbalancer.server.port=8080"

  # Cryptpad (Documents)
  cryptpad:
    build:
      context: ./
      dockerfile: ./build/Dockerfile-cryptpad
      args:
        version: "3.24.0"
    image: cryptpad:custom
    container_name: cryptpad
    restart: unless-stopped
    volumes:
      - files_cryptpad_volume:/cryptpad/data
    networks:
      - cryptpad_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.cryptpad.entrypoints=websecure"
      - "traefik.http.routers.cryptpad.rule=Host(`${CRYPTPAD_DOMAIN}`) || Host(`${CRYPTPAD_SANDBOX_DOMAIN}`)"
      - "traefik.http.routers.cryptpad.tls=true"
      - "traefik.http.routers.cryptpad.tls.certresolver=default"
      - "traefik.http.routers.cryptpad.middlewares=security@file"
      - "traefik.http.services.cryptpad.loadbalancer.server.port=3000"

networks:
  passwords_network: ~
  notes_network: ~
  cloud_network: ~
  calendar_network: ~
  bookmarks_network: ~
  sync_network: ~
  tasks_network: ~
  # We force the subnet here, so we can use it in
  # the iptables routing command afterwards to make
  # the outgoing packets go through a specific IP.
  # See https://stackoverflow.com/a/46493740/1741150
  mail_network:
    ipam:
      config:
        - subnet: "172.100.0.0/16"
  maps_network: ~
  cryptpad_network: ~

volumes:
  certificates:
    name: certificates
  gpg_volume:
    name: gpg_volume
  davis_www:
    name: davis_www
  database_mysql_volume: # This volume is actually an attached OpenStack Block storage
    driver: local
    driver_opts:
      o: bind
      type: none
      device: /mnt/databases/mysql
  database_postgres_volume: # This volume is actually an attached OpenStack Block storage
    driver: local
    driver_opts:
      o: bind
      type: none
      device: /mnt/databases/postgres
  database_couch_volume: # This volume is actually an attached OpenStack Block storage
    driver: local
    driver_opts:
      o: bind
      type: none
      device: /mnt/databases/couch
  database_mongo_volume: # This volume is actually an attached OpenStack Block storage
    driver: local
    driver_opts:
      o: bind
      type: none
      device: /mnt/databases/mongo
  files_cozy_volume: # This volume is actually an attached OpenStack Block storage. It stores the cozy files
    driver: local
    driver_opts:
      o: bind
      type: none
      device: /mnt/files/cozy
  files_sync_volume: # This volume is actually an attached OpenStack Block storage. It stores the syncthing data
    driver: local
    driver_opts:
      o: bind
      type: none
      device: /mnt/files/sync
  files_cryptpad_volume: # This volume is actually an attached OpenStack Block storage. It stores the cryptpad data
    driver: local
    driver_opts:
      o: bind
      type: none
      device: /mnt/files/cryptpad
  files_planka_volume: # This volume is actually an attached OpenStack Block storage. It stores the planka attachments
    driver: local
    driver_opts:
      o: bind
      type: none
      device: /mnt/files/tasks
  mails_volume: # This volume is actually an attached OpenStack Block storage. It stores the mail data
    driver: local
    driver_opts:
      o: bind
      type: none
      device: /mnt/files/mails
